export default {
  common: {
    version: 'Ver.',
    close: 'Close',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    copy: 'Copy',
    create: 'Create',
    export: 'Export',
    import: 'Import',
    yes: 'Yes',
    no: 'No',
    ok: 'OK',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    info: 'Information',
    loading: 'Loading...',
    confirmation: 'Confirmation',
    settings: 'Settings',
    send: 'Send',
    download: 'Download',
    none: 'None',
    resize: 'Resize'
  },
  header: {
    newAssistant: 'Create New Assistant',
    dataExport: 'Export Data',
    dataImport: 'Import Data',
    apiKeySettings: 'API Key Settings'
  },
  assistant: {
    default: 'Auto Assist Mode',
    title: 'Assistant',
    autoAssist: 'AutoAssist',
    autoAssistDescription: 'Automatically suggests optimal assistant',
    untitled: 'Untitled Assistant',
    settings: 'Assistant Settings',
    delete: 'Delete Assistant',
    name: 'Assistant Name',
    systemPrompt: 'System Prompt',
    instructions: 'Instructions',
    attachedFiles: 'Attached Files',
    selectFile: 'Select File',
    removeFile: 'Remove File',
    enableApiCall: 'Enable External API Calls',
    apiSettings: 'API Settings',
    summary: 'Summary',
    copyInstructions: 'Copy Instructions',
    nameRequired: 'Assistant name is required',
    createSuccess: 'New assistant created successfully',
    updateSuccess: 'Assistant information updated',
    deleteSuccess: 'Assistant deleted successfully',
    copySuccess: 'Instructions copied to clipboard'
  },
  chat: {
    default: 'Create and select an assistant to get started.',
    placeholder: 'Type a message...',
    dragDropFiles: 'Drag and drop files here, or click to select',
    unsupportedFileType: 'Unsupported file format',
    fileNotSupported: '{{fileName}} is not supported',
    attachedFiles: 'Attached Files',
    useAssistantFile: 'Use Knowledge Files',
    agentMode: 'Agent Mode',
    resetConversation: 'Reset Conversation',
    resetConfirmTitle: 'Reset Conversation History',
    resetConfirmMessage:
      'Are you sure you want to reset the conversation history? This action cannot be undone.',
    resetSuccess: 'Conversation history reset successfully',
    messageEmpty: 'Message is empty',
    sendError: 'Failed to send message',
    copyMessage: 'Copy Message',
    copyMessageSuccess: 'Message copied to clipboard',
    editMessage: 'Edit Message',
    editSuccess: 'Edit applied successfully',
    editDescription: 'Deleted subsequent history and executed with new content.',
    editError: 'Error occurred while executing edited content',
    attachFile: 'Attach File',
    imageGenerated: 'Image generated successfully.',
    generatedImage: 'Generated Image',
    selectedFiles: 'Selected Files'
  },
  autoAssist: {
    placeholder: 'Request to AutoAssist...',
    taskDivision: 'Divided into the following tasks and assigned recommended assistants:',
    task: 'Task',
    recommendedAssistant: 'Recommended Assistant',
    executing: 'Executing...',
    confirmExecution: 'Execute? (Yes to execute / No to cancel)',
    yesNoPrompt: 'Type Yes to execute / No to cancel.',
    cancelled: 'Task execution cancelled.',
    result: 'Result',
    finalResult: 'Final execution results:',
    noAssistantFound: '(Specified assistant not found)',
    executionError: '(Assistant execution error)',
    generalError: 'Error occurred during task division.',
    saveError: 'Error saving results. Results are displayed but may not be saved.',
    notFound: 'AutoAssist not found',
    resetSuccess: 'AutoAssist conversation history reset successfully',
    editRerunSuccess: 'AutoAssist edit result re-executed',
    editRerunDescription: 'Deleted history after specified index and executed with new content.',
    editRerunError: 'Error occurred during AutoAssist edit execution.',
    messageProcessError: 'Error occurred while processing message.'
  },
  api: {
    title: 'API Settings',
    apiKey: 'API Key',
    apiKeyPlaceholder: 'Enter API key',
    apiKeyHelp: 'The entered API key will be encrypted and saved',
    apiKeyDescription: 'Configure your Google AI (Gemini) API key.',
    saveSuccess: 'API key saved successfully',
    saveError: 'Failed to save API key',
    showKey: 'Show',
    hideKey: 'Hide',
    externalApiDisabled: 'API call function is not available',
    callError: 'Error occurred during API call.',
    supplementInfo: '[Supplemental Info: {{apiName}}]',
    error: 'Error',
    unknownError: 'Unknown error',
    addNew: 'Add New API',
    noConfigured: 'No APIs configured. Please create one using the "Add New API" button.',
    triggers: 'Triggers',
    pattern: 'Pattern',
    externalApiDescription: 'Manage external API integration settings.',
    openApiSettings: 'Open API Settings',
    configuredApisCount: 'Currently {{count}} APIs configured'
  },
  export: {
    title: 'Export Settings',
    exportAll: 'Export All',
    exportSelected: 'Export Selected Assistants',
    includeHistory: 'Include Conversation History',
    noSelection: 'No selection',
    selected: '{{count}} selected',
    exportSuccess: 'Export successful',
    exportError: 'Export failed',
    partialExportTitle: 'Partial Export (ZIP)',
    fullExportTitle: 'Export All Assistants',
    exportTarget: 'Export Target',
    exportAllDescription: 'All (All Assistants, Title Settings)',
    exportPartial: 'Selected Assistants',
    noAssistantSelected: 'No assistant selected',
    exportComplete: 'Export complete',
    exportErrorDescription: 'Error occurred during export'
  },
  import: {
    title: 'Select Import Mode',
    replaceMode: 'Replace Existing Data',
    replaceModeDescription: 'Delete all existing assistants and replace with imported data.',
    appendMode: 'Add to Existing Data',
    appendModeDescription: 'Keep existing assistants and add new assistants.',
    replaceWarning: 'This action cannot be undone. Are you sure you want to replace?',
    cancel: 'No file selected',
    importError: 'Error occurred during import.',
    replaceSuccess: 'Assistants replaced successfully',
    appendSuccess: 'Assistants added successfully',
    replaceError: 'Error occurred during replace import.',
    appendError: 'Error occurred during append import.'
  },
  title: {
    edit: 'Edit Title',
    settings: 'Title Settings',
    segments: 'Segments',
    fontFamily: 'Font Family',
    backgroundImage: 'Background Image',
    selectImage: 'Select Image',
    removeImage: 'Remove Image',
    addSegment: '+ Add Line',
    text: 'Text',
    color: 'Color',
    titleSegmentsLabel: 'Title Text + Color (multiple lines allowed)',
    revertToDefault: 'Revert to Default',
    revertedToDefault: 'Title reverted to default',
    imageSelectionCancelled: 'Image selection cancelled',
    backgroundImageError: 'Error setting background image',
    backgroundImageRemoved: 'Background image removed',
    settingsSaved: 'Title settings saved',
    currentlySet: 'Currently set'
  },
  validation: {
    required: 'This field is required',
    fileNotSelected: 'No file selected',
    unsupportedFormat: 'Unsupported format'
  },
  errors: {
    appExpired: 'Application has expired',
    functionNotFound: 'Function not found',
    saveFailed: 'Failed to save',
    loadFailed: 'Failed to load',
    deleteFailed: 'Failed to delete',
    imageLoadError: 'Failed to load image',
    notImplemented: 'Not implemented'
  },
  modal: {
    newAssistant: {
      title: 'Create New Assistant',
      assistantName: 'Assistant Name',
      assistantNamePlaceholder: 'Enter assistant name',
      systemPrompt: 'System Prompt',
      systemPromptPlaceholder: 'Enter prompt',
      agentFiles: 'Knowledge files (multiple files allowed)',
      selectFile: 'Select File',
      noFiles: 'No files',
      enableApiCall: 'Enable External API Calls',
      apiCallHelper: 'Set up external APIs that can be called by the assistant.',
      apiSettings: 'API Settings',
      create: 'Create',
      cancel: 'Cancel'
    },
    editAssistant: {
      title: 'Assistant Settings',
      assistantName: 'Assistant Name',
      assistantNamePlaceholder: 'Set the role and tone of the assistant',
      systemPrompt: 'System Prompt',
      systemPromptPlaceholder: 'Enter prompt',
      systemPromptCopy: 'Copy',
      agentFiles: 'Knowledge files (multiple files allowed)',
      selectFile: 'Select File',
      noFiles: 'No files',
      copyInstructions: 'Copy Instructions',
      resetConversation: 'Reset conversation history',
      enableApiCall: 'Enable External API Calls',
      apiCallHelper: 'Set up external APIs that can be called by the assistant.',
      apiSettings: 'API Settings',
      save: 'Save',
      cancel: 'Cancel'
    },
    deleteAssistant: {
      title: 'Delete Assistant',
      message: 'Are you sure you want to delete this assistant? This action cannot be undone.',
      delete: 'Delete',
      cancel: 'Cancel'
    },
    resetConversation: {
      title: 'Reset Conversation History',
      message: 'Are you sure you want to reset conversation history?',
      reset: 'Reset',
      cancel: 'Cancel'
    },
    resetAutoAssist: {
      title: 'Reset AutoAssist Conversation History',
      message:
        'Are you sure you want to reset AutoAssist conversation history? This action cannot be undone.',
      reset: 'Reset',
      cancel: 'Cancel'
    }
  },
  settings: {
    title: 'Settings',
    tabs: {
      general: 'General',
      api: 'API',
      language: 'Language'
    },
    general: {
      description: 'General configuration options.',
      futureSettings: 'Additional settings will be displayed here in the future.'
    },
    language: {
      title: 'Language Settings',
      description: 'Change the application display language',
      current: 'Current Language',
      japanese: '日本語',
      english: 'English',
      changeSuccess: 'Language changed successfully',
      changeError: 'Failed to change language'
    }
  },
  apiConfig: {
    apiName: 'API Name',
    apiNamePlaceholder: 'Weather API, Search API, etc.',
    description: 'API Description',
    descriptionPlaceholder: 'Describe the function and purpose of this API',
    endpoint: 'Endpoint',
    endpointPlaceholder: 'https://api.example.com/data',
    method: 'Method',
    authType: 'Authentication Type',
    authTypeOptions: {
      none: 'No Authentication',
      apiKey: 'API Key',
      bearer: 'Bearer Token',
      basic: 'Basic Authentication'
    },
    apiKeyName: 'API Key Name',
    apiKeyNamePlaceholder: 'X-API-Key',
    apiKeyValue: 'API Key Value',
    apiKeyValuePlaceholder: 'your-api-key',
    apiKeyHelp: 'API key will be securely stored locally',
    includeInHeader: 'Include in Header (unchecked will use query parameter)',
    bearerToken: 'Bearer Token',
    bearerTokenPlaceholder: 'your-access-token',
    bearerTokenHelp: 'Token will be securely stored locally',
    username: 'Username',
    usernamePlaceholder: 'username',
    password: 'Password',
    passwordPlaceholder: 'password',
    passwordHelp: 'Password will be securely stored locally',
    requestHeaders: 'Request Headers (JSON format)',
    requestHeadersPlaceholder: '{\n  "Content-Type": "application/json"\n}',
    invalidJsonFormat: 'Invalid JSON format',
    requestBodyTemplate: 'Request Body Template (ES6 template syntax)',
    queryParamsTemplate: 'Query Parameters Template (ES6 template syntax)',
    responseTemplate: 'Response Template (ES6 template syntax)',
    templateHelp: 'You can reference parameters using ${params.xxx} format',
    responseTemplateHelp: 'Access API response using responseObj variable',
    responseType: 'Response Type',
    responseTypeText: 'Text',
    responseTypeImage: 'Image',
    imageDataPath: 'Image Data Path',
    imageDataPathPlaceholder: 'e.g., data[0].b64_json',
    imageDataPathHelp:
      'Specify the location of image data (Base64) in the response JSON. e.g., data[0].b64_json',
    triggers: {
      title: 'API Trigger Settings',
      description:
        'API will be called when matching the following triggers. Multiple triggers can be set.',
      keyword: 'Keyword',
      pattern: 'Pattern',
      keywordTrigger: 'Keyword Trigger',
      patternTrigger: 'Pattern Trigger',
      noTriggers: 'No triggers configured. We recommend adding at least one trigger.',
      addNew: 'Add New Trigger',
      triggerType: 'Trigger Type',
      keywordOption: 'Keywords (comma-separated)',
      patternOption: 'Pattern (regular expression)',
      keywordLabel: 'Keywords',
      patternLabel: 'Pattern',
      keywordPlaceholder: 'e.g., weather,forecast,temperature',
      patternPlaceholder: 'e.g., (Tokyo|Osaka|Nagoya) (weather|temperature)',
      keywordHelp:
        'Specify multiple keywords separated by commas. Triggers when any keyword is found.',
      patternHelp: 'Specify a regular expression pattern. Triggers when the pattern matches.',
      descriptionLabel: 'Description (optional)',
      descriptionPlaceholder: 'e.g., Detect weather-related questions',
      addButton: 'Add Trigger',
      deleteButton: 'Delete'
    },
    confirmSave: {
      title: 'Save Settings',
      message: 'Apply these configuration changes directly?',
      note: '* These changes will be applied immediately. You don\'t need to press "Save" on the original settings screen.',
      saveAndApply: 'Save and Apply'
    },
    saveSuccess: 'API settings saved',
    saveSuccessDescription: 'Changes applied immediately'
  }
}
